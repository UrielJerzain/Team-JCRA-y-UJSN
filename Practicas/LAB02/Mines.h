typedef unsigned char uint8;
typedef unsigned short uint16;
typedef unsigned int uint32;

typedef enum
{
enColumn0,
enColumn1,
enColumn2,
enColumn3,
enColumn4,
enColumn5,
enColumn6,
enColumn7,
enColumn8,
enColumn9,
enColumn10,
enColumn11,
enColumn12,
enColumn13,
enColumn14,
enColumn15,
enColumn16,
enMaxColumns
}tstMines;

typedef enum
{
	enRow0,
	enRow1,
	enRow2,
	enRow3,
	enRow4,
	enRow5,
	enRow6,
	enRow7,
	enRow8,
	enRow9,
	enRow10,
	enRow11,
	enRow12,
	enRow13,
	enRow14,
	enRow15,
	enRow16,
	enMaxRows
}tenRows;

#define AT_ASCII        		64
#define HASHTAG_ASCII   		35
#define ZERO_ASCII          	48
#define EASY		        	10
#define MEDIUM      			20
#define HARD         			30
#define GOD         			60
#define XFACTOR  				1
#define YFACTOR 				1
#define FACTOR              	1
#define ROW_BORDER1   	    	0
#define ROW_BORDER2		    	16
#define COLUMN_BORDER1	    	0
#define COLUMN_BORDER2      	16
#define LEVEL_EASY          	1
#define LEVEL_MEDIUM        	2
#define LEVEL_HARD          	3
#define LEVEL_GOD           	4
#define SIZE1 					1
#define SIZE2					15
#define CORNER1_ASCII 			218 /*Top Left*/
#define CORNER2_ASCII       	191 /*Top Right*/
#define CORNER3_ASCII       	192 /*Bottom Left*/
#define CORNER4_ASCII       	217 /*Bottom Right*/
#define BORDER1_ASCII 			196 /*Horizontal*/
#define BORDER2_ASCII			179 /*Vertical*/

#define INIT_MAP		\
{								\
	{CORNER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,CORNER2_ASCII},					\
	{BORDER2_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,BORDER2_ASCII},					\
	{BORDER2_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,BORDER2_ASCII},					\
	{BORDER2_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,BORDER2_ASCII},					\
	{BORDER2_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,BORDER2_ASCII},					\
	{BORDER2_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,BORDER2_ASCII},					\
	{BORDER2_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,BORDER2_ASCII},					\
	{BORDER2_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,BORDER2_ASCII},					\
	{BORDER2_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,BORDER2_ASCII},					\
	{BORDER2_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,BORDER2_ASCII},					\
	{BORDER2_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,BORDER2_ASCII},					\
	{BORDER2_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,BORDER2_ASCII},					\
	{BORDER2_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,BORDER2_ASCII},					\
	{BORDER2_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,BORDER2_ASCII},					\
	{BORDER2_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,BORDER2_ASCII},					\
	{BORDER2_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,HASHTAG_ASCII,BORDER2_ASCII},					\
	{CORNER3_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,CORNER4_ASCII},					\
}

#define INIT_BOMB		\
{								\
	{CORNER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,CORNER2_ASCII},					\
	{BORDER2_ASCII,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,BORDER2_ASCII},					\
	{BORDER2_ASCII,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,BORDER2_ASCII},					\
	{BORDER2_ASCII,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,BORDER2_ASCII},					\
	{BORDER2_ASCII,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,BORDER2_ASCII},					\
	{BORDER2_ASCII,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,BORDER2_ASCII},					\
	{BORDER2_ASCII,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,BORDER2_ASCII},					\
	{BORDER2_ASCII,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,BORDER2_ASCII},					\
	{BORDER2_ASCII,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,BORDER2_ASCII},					\
	{BORDER2_ASCII,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,BORDER2_ASCII},					\
	{BORDER2_ASCII,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,BORDER2_ASCII},					\
	{BORDER2_ASCII,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,BORDER2_ASCII},					\
	{BORDER2_ASCII,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,BORDER2_ASCII},					\
	{BORDER2_ASCII,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,BORDER2_ASCII},					\
	{BORDER2_ASCII,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,BORDER2_ASCII},					\
	{BORDER2_ASCII,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,ZERO_ASCII   ,BORDER2_ASCII},					\
	{CORNER3_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,BORDER1_ASCII,CORNER4_ASCII},					\
}

void PrintGameBoard ();
void BombsPlacement (uint8 u8Difficulty);
void Numbers(uint8 u8Row, uint8 u8Column);
void Repetition();
void Game(uint8 u8Difficulty);
uint8 Row();
uint8 Column();
void Reveal(uint8 u8Row, uint8 u8Column);

